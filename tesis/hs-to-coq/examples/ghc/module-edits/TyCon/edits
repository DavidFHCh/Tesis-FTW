# need a type edit -- should return an N instead of a nat
#
skip Core.primRepSizeB

rewrite forall x, andb Util.debugIsOn x = false

## need default DataCon for record selector, but cannot add it now
skip Core.dataCon
skip Core.data_con

## Cannot add necessary default before partial record selector
skip Core.algTcParent
skip Core.promDcRepInfo


skip Core.mkTyConKind
rewrite forall x y, Core.mkTyConKind x y = tt

skip Core.kindTyConKeys
skip Core.isKindTyCon


## need name of class
skip Core.okParent

## Needs DataCon.dataConExTyVars
skip Core.isDataProductTyCon_maybe
skip Core.isDataSumTyCon_maybe 
skip Core.isProductTyCon 
skip Core.isPromotedTupleTyCon

skip Core.isInjectiveTyCon
skip Core.isGenerativeTyCon
skip Core.tyConInjectivityInfo 

skip Core.tyConATs
skip module ForeignCall

# Needs ClassSpec
# skip Core.tyConAssoc_maybe
# skip Core.isTyConAssoc

## can't use Applicative ((->)A)
skip Core.isLiftedTypeKindTyConName

skip Core.tyConRuntimeRepInfo
skip Core.tyConSkolem



redefine Local Definition Core.Eq___TyConFlavour_op_zeze__
   : TyConFlavour -> (TyConFlavour -> bool) := fun a b => false.


order Core.Uniquable__TyCon_getUnique Core.Uniquable__TyCon Core.Ord__TyCon_compare Core.Eq___TyCon_op_zeze__ Core.Eq___TyCon_op_zsze__ Core.Eq___TyCon Core.Ord__TyCon

order Core.Uniquable__TyCon Core.Eq___TyCon_op_zeze__ Core.Eq___TyCon_op_zsze__
order Core.Eq___PrimElemRep Core.Eq___PrimRep_op_zeze__



