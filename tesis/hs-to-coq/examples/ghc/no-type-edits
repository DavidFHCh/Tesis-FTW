skip module TyCoRep
skip module Coercion
skip module CoAxiom
skip module Type
skip module Unify
skip module TcType
skip module TysWiredIn
skip module RepType
skip module ForeignCall
skip module	FamInstEnv
skip module PprCore
skip module Data.ByteString
skip module ErrUtils
skip module OccurAnal
skip module CostCentre
skip module PrimOp
skip module TysPrim
skip module Platform


####################################################
## Most of the time, we are counting 

rename type GHC.Num.Int = nat

rewrite forall, Data.Foldable.length       = Coq.Lists.List.length
rewrite forall x y, GHC.List.replicate x y = Coq.Lists.List.repeat y x
rewrite forall x, GHC.List.take x          = Coq.Lists.List.firstn x
rewrite forall x, GHC.List.drop x          = Coq.Lists.List.skipn x


####################################################
## Glueing together the Core
####################################################

#
# This must stay in sync with the Makefile
#
rename module Class   Core
rename module TyCon   Core
rename module DataCon Core
rename module Var     Core
rename module IdInfo  Core
rename module PatSyn  Core
rename module VarSet  Core
rename module VarEnv  Core
rename module CoreSyn Core
rename module Demand  Core


#
# Punned constructor values (in Core)
#
rename value DataCon.HsSrcBang  = Core.Mk_HsSrcBang
rename value DataCon.EqSpec     = Core.Mk_EqSpec
rename value Class.Class        = Core.Mk_Class
rename value Var.Id             = Core.Mk_Id
rename value Var.TyVar          = Core.Mk_TyVar
rename value Var.TcTyVar        = Core.Mk_TcTyVar
rename value IdInfo.IdInfo      = Core.Mk_IdInfo
rename value IdInfo.DFunId      = Core.Mk_DFunId
rename value IdInfo.JoinId      = Core.Mk_JoinId
rename value IdInfo.RuleInfo    = Core.Mk_RuleInfo
rename value CoreSyn.Var        = Core.Mk_Var
rename value CoreSyn.IsOrphan   = Core.Mk_IsOrphan
rename value CoreSyn.RuleEnv    = Core.Mk_RuleEnv
rename value Demand.ExnStr      = Core.Mk_ExnStr
rename value Demand.Str         = Core.Mk_Str
rename value Demand.Use         = Core.Mk_Use
rename value Demand.DmdType     = Core.Mk_DmdType
rename value Demand.StrictSig   = Core.Mk_StrictSig
rename value Demand.KillFlags   = Core.Mk_KillFlags

## Other punning

rename value CoreFVs.FVAnn    = CoreFVs.Mk_FVAnn
rename value CoreSubst.Subst  = CoreSubst.Mk_Subst

###############################################################################
#  General edits related to translating Core
###############################################################################

## Outputtable
rewrite forall x, Core.pprIdDetails x = Panic.someSDoc
## CallStack 
rewrite forall x, Core.idInfo x = @Core.idInfo tt x


###############################################################################
#  Pruning the AST, general
###############################################################################

rename type PrimOp.PrimOp           = unit
rename type ForeignCall.ForeignCall = unit
rename type ForeignCall.CType       = unit
rename type CostCentre.CostCentre   = unit

# used in DataCon
rename type MkId.DataConBoxer = unit



###############################################################################
# IdInfo  --- edit out unfoldingIndo, ruleInfo
###############################################################################

redefine Axiom Core.Unfolding : Type.

## Core.getUnfolding and getUnfoldingInfo added to IdInfo/midamble.v
## (must be used by other definitions in the midamble.v)
## add Core Axiom Core.getUnfolding : Core.UnfoldingInfo -> Core.Unfolding.
## add Core Axiom Core.getUnfoldingInfo : Core.Unfolding -> Core.UnfoldingInfo.

## "Axiom CoreRuleInfo : Type" added to IdInfo/preamble.v
redefine Inductive Core.RuleInfo : Type := Mk_RuleInfo : (list Core.CoreRuleInfo) -> (Core.DVarSet -> RuleInfo).
## add Core Axiom Core.getCoreRule     : Core.CoreRuleInfo -> Core.CoreRule.
## add Core Axiom Core.getCoreRuleInfo : Core.CoreRule -> Core.CoreRuleInfo.

rewrite forall x,     Core.setUnfoldingInfo  x = x
rewrite forall x dmd, Core.setUnfoldingInfo  x dmd = x

rewrite forall arg y, Id.setIdUnfolding arg y = arg
rewrite forall id,    Id.realIdUnfolding id = Core.NoUnfolding

rewrite forall x,     Core.unfoldInfo x = tt
rewrite forall x,     CoreSyn.isEvaldUnfolding x = false
rewrite forall x,     Core.isStableUnfolding x = false
rewrite forall x,     Core.isFragileUnfolding x = false


# this is a type coercion
rewrite forall ,      Core.NoUnfolding   = Core.getUnfolding Core.NoUnfolding
rewrite forall ,      Core.BootUnfolding = Core.getUnfolding Core.BootUnfolding
rewrite forall ,      Core.OtherCon      = fun x => Core.getUnfolding (Core.OtherCon x)


rewrite forall x,     Core.isEmptyRuleInfo x = true


# no free variables in non-present rules
# (this edit is used in the CoreFVs module)
rewrite forall get_fvs id, Core.mapUnionVarSet get_fvs (Id.idCoreRules id) = Core.emptyVarSet


###############################################################################
# brutaly skip all type info
###############################################################################

rename type TcType.TcTyVarDetails = unit

rename type TyCoRep.Coercion      = unit
rename type TyCoRep.Type_         = unit
rename type TyCoRep.ThetaType     = unit
rename type TyCoRep.TyBinder      = unit
rename type TyCoRep.TyThing       = unit
rename type TyCoRep.Kind          = unit
rename type TyCoRep.PredType      = unit

rename type TyCoRep.TvSubstEnv    = unit
rename type TyCoRep.CvSubstEnv    = unit
rename type TyCoRep.TCvSubst      = unit

rename type CoAxiom.CoAxiom            = list
rename type CoAxiom.Branched           = unit
rename type CoAxiom.Unbranched         = unit
rename type CoAxiom.BuiltInSynFamily   = unit
rename type CoAxiom.Role               = unit
rename value CoAxiom.Representational  = tt
rename value CoAxiom.Nominal           = tt

rename value TysWiredIn.liftedTypeKind = tt
rename value TysWiredIn.constraintKind = tt

## Could make these unit too.
## ACTUALLY THE ARE UNUSED
redefine Inductive CoAxiom.CoAxiomRule      : Type := CoAxiom.Mk_CoAxiomRule_Dummy.
redefine Inductive CoAxiom.BuiltInSynFamily : Type := CoAxiom.Mk_BuiltInSynFamily_Dummy.

###############################################################################
# rewrites for type/corecion related operations defined in skipped modules
###############################################################################

rewrite forall e x y,  Coercion.eqCoercionX e x y = true
rewrite forall v,      Coercion.mkCoVarCo v = tt
rewrite forall co,     Coercion.coercionType co = tt

rewrite forall x,      TyCoRep.mkTyVarTy x = tt
rewrite forall env x,  TyCoRep.tidyType env x = tt
rewrite forall env co, TyCoRep.tidyCo env co = tt

rewrite forall co,     TyCoRep.tyCoFVsOfCo co          = FV.emptyFV
rewrite forall ty,     TyCoRep.tyCoFVsOfType ty        = FV.emptyFV
rewrite forall b_ty,   TyCoRep.tyCoVarsOfTypeDSet b_ty = Core.emptyDVarSet
rewrite forall co,     TyCoRep.tyCoVarsOfCoDSet co     = Core.emptyDVarSet
rewrite forall s knd,  TyCoRep.substTyUnchecked s knd  = tt
rewrite forall s t n,  TyCoRep.extendTvSubstWithClone s t n = s
rewrite forall s ty,   TyCoRep.substTy s ty            = tt
rewrite forall x,      TyCoRep.isCoercionType x        = false
rewrite forall x,      TyCoRep.noFreeVarsOfType x      = true
rewrite forall x y,    TyCoRep.zipTvSubst x y          = tt

rewrite forall x,      Type.isUnliftedType x = false
rewrite forall x y,    Type.isTypeLevPoly x y = fun y => false
rewrite forall x,      Type.resultIsLevPoly x = false
rewrite forall x,      Type.isFunTy x = false
rewrite forall x,      Type.splitPiTy_maybe x = None
rewrite forall x,      Type.isCoercionTy_maybe x = None
rewrite forall x,      Type.caseBinder x = x
rewrite forall e x y,  Type.eqCoercionX e x y = true
rewrite forall e x y,  Type.eqTypeX e x y = true
rewrite forall ty,     Type.typeKind         ty = tt
rewrite forall x,      Type.mkInvForAllTys x y = tt



###############################################################################
# rewrites for type/corecion related operations defined in translated modules
###############################################################################

# TODO: translate PrelNames
rewrite forall id, (Unique.hasKey id PrelNames.absentErrorIdKey) = false

rewrite forall x,      Core.sel_tycon x = tt
rewrite forall var,    Core.isTyCoVar var = false
rewrite forall i c,    Core.dataConCannotMatch i c = false
rewrite forall x y,    Core.mkTyConKind x y = tt
rewrite forall e t1 t2,  Core.rnBndrs2 e t1 t2 = env

rewrite forall rhs,    CoreUtils.exprType rhs = tt

rewrite forall con,    DataCon.dataConRepStrictness con = nil
rewrite forall con,    DataCon.dataConRepArgTys con = nil
rewrite forall con,    DataCon.dataConExTyVars con = @nil unit


rewrite forall x,      Literal.literalType x = tt

rewrite forall x,      Id.idType x = tt
rewrite forall x t,    Id.setIdType x t = x
rewrite forall x,      Id.isNeverLevPolyId id = false

rewrite forall ty,     CoreFVs.orphNamesOfType ty = NameSet.emptyNameSet
rewrite forall co,     CoreFVs.orphNamesOfCo   co = NameSet.emptyNameSet
rewrite forall id,     CoreFVs.bndrRuleAndUnfoldingFVs id = FV.emptyFV

# TODO: make these disappear entirely with rewrites?
#
redefine Definition    CoreFVs.idRuleFVs      : Core.Id  -> FV.FV := fun id  => FV.emptyFV.
redefine Definition    CoreFVs.varTypeTyCoFVs : Core.Var -> FV.FV := fun var => FV.emptyFV.
redefine Definition    CoreFVs.idUnfoldingFVs : Core.Id  -> FV.FV := fun id  => FV.emptyFV.

rewrite forall x y,    TyCon.mkTyConKind x y = tt
# could make this unit too
redefine Inductive TyCon.RuntimeRepInfo : Type := TyCon.Mk_RuntimeRepInfo_Dummy.
