
# still partial
skip Data.List.NonEmpty.!!

skip Data.List.NonEmpty.fromList
skip Data.List.NonEmpty.lift
skip Data.List.NonEmpty.tails
skip Data.List.NonEmpty.scanl
skip Data.List.NonEmpty.scanr

## in midamble, redefine to prove total
skip Data.List.NonEmpty.toList
skip Data.List.NonEmpty.insert
skip Data.List.NonEmpty.sort
skip Data.List.NonEmpty.sortBy

## todo
skip Data.List.NonEmpty.scanl1
skip Data.List.NonEmpty.reverse

# Needs Alternative
skip Data.List.NonEmpty.some1

order Data.List.NonEmpty.zipWith Data.List.NonEmpty.Applicative__NonEmpty_op_zlztzg__ Data.List.NonEmpty.Applicative__NonEmpty Data.List.NonEmpty.Monad__NonEmpty_op_zgzg__ Data.List.NonEmpty.Monad__NonEmpty_return_ Data.List.NonEmpty.Monad__NonEmpty

order Data.List.NonEmpty.Eq___NonEmpty Data.List.NonEmpty.Ord___NonEmpty

order Data.List.NonEmpty.Foldable__NonEmpty Data.List.NonEmpty.Traversable__NonEmpty Data.List.NonEmpty.reverse Data.List.NonEmpty.sort Data.List.NonEmpty.sortBy Data.List.NonEmpty.sortWith

# needs Data.OldList.transpose
skip Data.List.NonEmpty.transpose
# needs Data.OldList.intersperse
skip Data.List.NonEmpty.intersperse

skip Data.List.NonEmpty.iterate

skip Data.List.NonEmpty.inits

skip Data.List.NonEmpty.repeat

skip Data.List.NonEmpty.cycle

##???
skip Data.List.NonEmpty.unfoldr

# actually total, can't tell
skip Data.List.NonEmpty.scanr1
skip Data.List.NonEmpty.init
skip Data.List.NonEmpty.last
skip Data.List.NonEmpty.unfold

# recursive call to Foldable
skip Data.List.NonEmpty.groupBy
skip Data.List.NonEmpty.group
skip Data.List.NonEmpty.groupWith
skip Data.List.NonEmpty.groupAllWith
skip Data.List.NonEmpty.groupBy1
skip Data.List.NonEmpty.groupWith1
skip Data.List.NonEmpty.groupAllWith1
skip Data.List.NonEmpty.group1


redefine Local Definition Data.List.NonEmpty.Applicative__NonEmpty_op_zlztzg__ : forall {a} {b},
  (Data.List.NonEmpty.NonEmpty (a -> b)) -> ((Data.List.NonEmpty.NonEmpty a) -> (Data.List.NonEmpty.NonEmpty b)) := fun {a} {b} => zipWith id.

redefine Local Definition Data.List.NonEmpty.Functor__NonEmpty_op_zlzd__: forall {a} {b}, a -> ((NonEmpty b) -> (NonEmpty a))
  := fun {a} {b} f x => match x with | NEcons a as_ => NEcons f (GHC.Base.op_zlzd__ f as_) end.

redefine Local Definition Data.List.NonEmpty.Eq__a___GHC_Base_Eq____NonEmpty_a__op_zsze__ {inst_a}
                                                                                        `{_: GHC.Base.Eq_ inst_a}
    : (NonEmpty inst_a) -> ((NonEmpty inst_a) -> bool) :=
  fun arg_198__ arg_199__ =>
    match arg_198__ , arg_199__ with
      | a , b => negb (Data.List.NonEmpty.Eq__a___GHC_Base_Eq____NonEmpty_a__op_zeze__ a b)
    end.

redefine Local Definition Data.List.NonEmpty.Traversable__NonEmpty_traverse
    : forall {f} {a} {b} {H : GHC.Base.Functor f} {_ : GHC.Base.Applicative f}, (a -> (f b)) -> ((NonEmpty a) -> (f (NonEmpty b))) :=
  fun {f} {a} {b} {_} {_} =>
    fun arg_144__ arg_145__ =>
      match arg_144__ , arg_145__ with
        | f , NEcons a as_ => GHC.Base.op_zlztzg__ (Data.Functor.op_zlzdzg__ NEcons (f a)) (Data.Traversable.traverse f as_)
      end.

redefine Local Definition Data.List.NonEmpty.Foldable__NonEmpty_fold
    : forall {m} {_ : GHC.Base.Monoid m}, ((NonEmpty m) -> m) :=
  fun {m} {_} => fun arg_141__ => match arg_141__ with | NEcons m ms => GHC.Base.mappend m (Data.Foldable.fold ms) end.

redefine Local Definition Data.List.NonEmpty.Foldable__NonEmpty_foldMap
    : forall {m} {a} {_ : GHC.Base.Monoid m}, (a -> m) -> ((NonEmpty a) -> m) :=
  fun {m} {a} {_} => fun f arg_141__ => match arg_141__ with | NEcons m ms => GHC.Base.mappend (f m) (Data.Foldable.foldMap f ms) end.

redefine Local Definition Data.List.NonEmpty.Foldable__NonEmpty_foldl
    : forall {b} {a}, (b -> (a -> b)) -> (b -> ((NonEmpty a) -> b)) :=
  fun {b} {a} => fun arg_128__ arg_129__ arg_130__
          => match arg_128__ , arg_129__ , arg_130__ with
               | f , z , NEcons a as_ => Data.Foldable.foldl f (f z a) as_
             end.

redefine Local Definition Data.List.NonEmpty.Foldable__NonEmpty_foldr
    : forall {a} {b}, (a -> (b -> b)) -> (b -> ((NonEmpty a) -> b)) :=
  fun {a} {b} => fun arg_128__ arg_129__ arg_130__
          => match arg_128__ , arg_129__ , arg_130__ with
               | f , z , NEcons a as_ => f a (Data.Foldable.foldr f z as_)
             end.

redefine Local Definition Data.List.NonEmpty.Foldable__NonEmpty_elem :
  forall {a},
  forall `{_ : GHC.Base.Eq_ a}, a -> ((NonEmpty a) -> bool) :=
  fun {a} `{_ : GHC.Base.Eq_ a} => Coq.Program.Basics.compose
   (fun p => Data.Foldable.hash_compose Data.Monoid.getAny (Data.List.NonEmpty.Foldable__NonEmpty_foldMap (Data.Foldable.hash_compose Data.Monoid.Mk_Any p)))
   GHC.Base.op_zeze__.

redefine Local Definition Data.List.NonEmpty.Monad__NonEmpty_op_zgzgze__
    : forall {a} {b}, ((NonEmpty a) -> ((a -> (NonEmpty b)) -> (NonEmpty b))) :=
  fun {a} {b} => fun arg_148__ arg_149__ =>
             match arg_148__ , arg_149__ with
               | NEcons a as_ , f => match f a with
                                       | NEcons b bs => NEcons b (Coq.Init.Datatypes.app bs (GHC.Base.op_zgzgze__ as_ (GHC.Base.op_z2218U__ Data.List.NonEmpty.Foldable__NonEmpty_toList f)))
                                     end
             end.

# Something broke with derived instances (compare gets renamed to the instanceâ€™s method,
# even though it should use GHC.Base.compare) after going to qualified names
skip Data.List.NonEmpty.Ord__NonEmpty
#skip Data.List.NonEmpty.Eq___NonEmpty
