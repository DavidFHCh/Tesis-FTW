rename type GHC.Num.Int = nat

rewrite forall, Data.Foldable.length       = Coq.Lists.List.length
rewrite forall x y, GHC.List.replicate x y = Coq.Lists.List.repeat y x
rewrite forall x, GHC.List.take x        = Coq.Lists.List.firstn x
rewrite forall x, GHC.List.drop x        = Coq.Lists.List.skipn x


skip module Data.Char
skip module GHC.Ptr
skip module GHC.IO.Encoding.Types 
skip module GHC.Exts
skip module GHC.IO.Encoding
skip module GHC.IO.Exception
skip module GHC.IO.Handle
skip module GHC.IO.Handle.Types
skip module GHC.IO.Unsafe
skip module GHC.IORef 
skip module GHC.Read
skip module GHC.Real
skip module System.Directory
skip module System.FilePath.Posix
skip module System.IO.Error
skip module Text.ParserCombinators.ReadP
skip module Text.Read 
skip module Data.IORef 
skip module Data.Time.Clock.Internal.UTCTime 
skip module GHC.Conc.Sync
skip module Exception

## Generics
skip Util.abstractConstr
skip Util.abstractDataType

## IO
skip Util.consIORef
skip Util.doesDirNameExist

## Read
skip Util.maybeRead
skip Util.maybeReadFuzzy
skip Util.toArgs
skip Util.readHexRational__
skip Util.readHexRational
skip Util.readRational__
skip Util.readRational

## 
skip Util.minWith

## partial, needs {Default acc}, in midamble
skip Util.foldl2

## needs Data.Traversable.mapAccumL
skip Util.mapAccumL2

rewrite forall , Util.only = Panic.head
skip Util.only

# Environment dependent
skip Util.isDarwinHost

## TODO
rewrite forall x, GHC.Unicode.toUpper x = x

skip Util.charToC
skip Util.chunkList

skip Util.removeSpaces
skip Util.escapeSpaces

skip Util.getCmd
skip Util.toCmdArgs 

skip Util.golden
skip Util.looksLikeModuleName

## wrong but not incorrect
redefine Definition Util.makeRelativeTo  : GHC.Base.String -> (GHC.Base.String -> GHC.Base.String) := fun this that => this.
redefine Definition Util.looksLikePackageName : GHC.Base.String -> bool := fun x => false.

redefine Definition Util.HasDebugCallStack := unit.


skip Util.matchVectors
skip Util.mulHi
skip Util.hashInt32
skip Util.hashString

## termination
skip Util.nTimes
termination Util.nTimes deferred
termination Util.split deferred

in Util.exactLog2 termination pow2 deferred
in Util.transitiveClosure termination go deferred

skip Util.nubSort

skip Util.reslash

skip Util.restrictedDamerauLevenshteinDistanceWorker
skip Util.restrictedDamerauLevenshteinDistance'
skip Util.restrictedDamerauLevenshteinDistanceWithLengths
skip Util.restrictedDamerauLevenshteinDistance 

skip Util.fuzzyLookup
skip Util.fuzzyMatch

skip Util.getModificationUTCTime
skip Util.modificationTimeIfExists
skip Util.global
skip Util.globalM
skip Util.hSetTranslit

skip Util.sharedGlobal
skip Util.sharedGlobalM

## needs tail
skip Util.splitLongestPrefix


redefine Definition Util.mapAndUnzip {a} {b} {c}
           (f : a -> (b * c)) : ((list a) -> ((list b) * (list c))) :=
  fix mapAndUnzip y
    := match y with
       | nil => pair nil nil
       | cons x xs =>
         match mapAndUnzip xs with    
         | pair rs1 rs2 => match f x with
                          | pair r1 r2 =>
                            pair (cons r1 rs1) (cons r2 rs2)
                          end
         end
       end.
