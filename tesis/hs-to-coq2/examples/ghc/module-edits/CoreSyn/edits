#
# This would be better if we had a rewrite for types
#
redefine Axiom Core.Unfolding : Type.

rewrite forall , Core.BootUnfolding = getUnfolding Core.BootUnfolding
rewrite forall , Core.OtherCon      = fun x => getUnfolding (Core.OtherCon x)
rewrite forall , Core.NoUnfolding   = getUnfolding Core.NoUnfolding

redefine Definition Core.hasSomeUnfolding : Core.Unfolding -> bool :=
  fun arg_0__ =>
    match Core.getUnfoldingInfo arg_0__ with
    | Core.NoUnfolding => false
    | Core.BootUnfolding => false
    | _ => true
    end.

# Avoiding record patterns for `Core.Unfolding`.  We need a much better story
# for this.  Some or all of the skipped definitions can also be refactored to
# use `Core.getUnfoldingInfo'.

skip Core.maybeUnfoldingTemplate

redefine Definition Core.otherCons : Core.Unfolding -> (list Core.AltCon) :=
  fun u => match Core.getUnfoldingInfo u with
           | Core.OtherCon conses => conses
           | _                    => nil
           end.

skip Core.isValueUnfolding

redefine Definition Core.isEvaldUnfolding : Core.Unfolding -> bool :=
  fun u => match Core.getUnfoldingInfo u with
           | Core.OtherCon _ =>
               true
           | Core.CoreUnfolding _uf_tmpl _uf_src _uf_is_top
                                uf_is_value
                                _uf_is_conlike _uf_is_work_free _uf_expandable _uf_guidance =>
               uf_is_value
           | _ =>
               false
           end.

redefine Definition Core.isConLikeUnfolding : Core.Unfolding -> bool :=
  fun u => match Core.getUnfoldingInfo u with
           | Core.OtherCon _ =>
               true
           | Core.CoreUnfolding _uf_tmpl _uf_src _uf_is_top _uf_is_value
                                uf_is_conlike _uf_is_work_free _uf_expandable _uf_guidance =>
               uf_is_conlike
           | _ =>
               false
           end.

skip Core.isCheapUnfolding

skip Core.isExpandableUnfolding

skip Core.expandUnfolding_maybe

skip Core.isCompulsoryUnfolding

skip Core.isStableUnfolding

# skip Core.hasSomeUnfolding

redefine Definition Core.isBootUnfolding : Core.Unfolding -> bool :=
  fun u => match Core.getUnfoldingInfo u with
           | Core.BootUnfolding => true
           | _                  => false
           end.

redefine Definition Core.isFragileUnfolding : Core.Unfolding -> bool :=
  fun u => match Core.getUnfoldingInfo u with
           | Core.CoreUnfolding _ _ _ _ _ _ _ _ | DFunUnfolding _ _ _ => true
           | _                                                        => false
           end.

skip Core.canUnfold

skip module CostCentre
rename type CostCentre.CostCentre = unit

skip Core.mkNoCount
skip Core.mkNoScope
skip Core.tickishCanSplit
skip Core.tickishCounts
skip Core.tickishIsCode
skip Core.tickishContains

# record selector, no place to add default
skip Core.uf_tmpl
skip Core.unfoldingTemplate
skip Core.ru_rhs

order Core.Eq___DataCon Core.Eq___AltCon_op_zeze__ Core.Eq___AltCon Core.Ord__AltCon
order Core.Eq___Tickish Core.Ord__Tickish

redefine Definition Core.chooseOrphanAnchor (local_names : list Name.Name) : IsOrphan :=
    match  GHC.Base.map Name.nameOccName local_names with
    | cons hd tl => NotOrphan (Data.Foldable.foldr GHC.Base.min hd tl)
    | nil => Mk_IsOrphan
    end.

# uses Outputable.empty in panicStr
# in midamble
skip Core.exprToType

# piResultTy is in module Type
# in midamble
skip Core.applyTypeToArg


# needs GHC.Types.Double & other types ( GHC.Types.Float, GHC.Int.Int64)
skip Core.mkDoubleLitDouble
skip Core.mkFloatLitFloat
skip Core.mkInt64LitInt64

# needs Literal.mkMachInt
skip Core.mkIntLit
skip Core.mkIntLitInt
# needs Literal.mlMachWord64, Literal.mkMachWOrd
skip Core.mkWord64LitWord64
skip Core.mkWordLit
skip Core.mkWordLitWord

## Core.deTagExpr mutual recursion
inline mutual Core.deTagAlt
inline mutual Core.deTagBind

# ANTALSZ
# in midamble (due to mutual recursion)

## This doesn't work yet because of differing type variables
# inline mutual Core.deAnnotate
# inline mutual Core.deAnnAlt
skip Core.deAnnotate'


skip Core.collectAnnArgs

# needs a default constraint, as well as a termination argument
# in midamble
skip Core.collectNAnnBndrs
# in Core.collectNAnnBndrs    termination collect { measure (arg_0__)   }
# obligations Core.collectNAnnBndrs admit


in Core.collectAnnArgsTicks termination go      { measure (size_AnnExpr' (snd arg_0__)) }
obligations Core.collectAnnArgsTicks solve_collectAnnArgsTicks
in Core.collectAnnBndrs     termination collect { measure (size_AnnExpr' (snd arg_1__)) }
obligations Core.collectAnnBndrs solve_collectAnnArgsTicks

# skip Core.mkTyArg

rewrite forall x, Type.isCoercionTy_maybe x = None

skip Core.Default__Class
skip Core.Default__DataCon
skip Core.Default__IdInfo
skip Core.Default__CoreRule
skip Core.Default__RnEnv2
skip Core.Default__Var
skip Core.Default__PatSyn
skip Core.Default__RuleEnv
